From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PJ Reiniger <pj.reiniger@gmail.com>
Date: Sat, 7 May 2022 22:37:34 -0400
Subject: [PATCH 06/35] Explicitly use std::

---
 llvm/include/llvm/ADT/SmallSet.h       |  2 +-
 llvm/lib/Support/ErrorHandling.cpp     |  2 +-
 llvm/unittests/ADT/SmallPtrSetTest.cpp |  2 +-
 llvm/unittests/ADT/SmallSetTest.cpp    | 10 +++++-----
 llvm/unittests/ADT/StringMapTest.cpp   |  2 +-
 5 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/llvm/include/llvm/ADT/SmallSet.h b/llvm/include/llvm/ADT/SmallSet.h
index aeee5f97799aea7e7588d7afba1e47b4fa3d8c7b..4969dfb0d61c2fad805c9cb7bc0184ea6d47bf23 100644
--- a/llvm/include/llvm/ADT/SmallSet.h
+++ b/llvm/include/llvm/ADT/SmallSet.h
@@ -269,7 +269,7 @@ bool operator==(const SmallSet<T, LN, C> &LHS, const SmallSet<T, RN, C> &RHS) {
     return false;
 
   // All elements in LHS must also be in RHS
-  return all_of(LHS, [&RHS](const T &E) { return RHS.count(E); });
+  return std::all_of(LHS.begin(), LHS.end(), [&RHS](const T &E) { return RHS.count(E); });
 }
 
 /// Inequality comparison for SmallSet.
diff --git a/llvm/lib/Support/ErrorHandling.cpp b/llvm/lib/Support/ErrorHandling.cpp
index 637b669a7d0dae69ef4b34955f21a9fb8ba1276e..0b87b375de67dc18647e3ebe646bf323dd05e8c5 100644
--- a/llvm/lib/Support/ErrorHandling.cpp
+++ b/llvm/lib/Support/ErrorHandling.cpp
@@ -213,7 +213,7 @@ void LLVMResetFatalErrorHandler() {
 // I'd rather not double the line count of the following.
 #define MAP_ERR_TO_COND(x, y)                                                  \
   case x:                                                                      \
-    return make_error_code(errc::y)
+    return std::make_error_code(std::errc::y)
 
 std::error_code llvm::mapWindowsError(unsigned EV) {
   switch (EV) {
diff --git a/llvm/unittests/ADT/SmallPtrSetTest.cpp b/llvm/unittests/ADT/SmallPtrSetTest.cpp
index 7ed8670fd31ea2a14e6ba7f59a8ac8e35046890c..531f81ab5b3fc1dcff731230f3cb7649cb90aedf 100644
--- a/llvm/unittests/ADT/SmallPtrSetTest.cpp
+++ b/llvm/unittests/ADT/SmallPtrSetTest.cpp
@@ -298,7 +298,7 @@ TEST(SmallPtrSetTest, dereferenceAndIterate) {
 
   // Sort.  We should hit the first element just once and the final element N
   // times.
-  llvm::sort(Found);
+  std::sort(std::begin(Found), std::end(Found));
   for (auto F = std::begin(Found), E = std::end(Found); F != E; ++F)
     EXPECT_EQ(F - Found + 1, *F);
 }
diff --git a/llvm/unittests/ADT/SmallSetTest.cpp b/llvm/unittests/ADT/SmallSetTest.cpp
index b50b368ae663614f050c220432c05b32c201db00..f9d84fa8a42a7feaaffa3aa080e84574dc3671b3 100644
--- a/llvm/unittests/ADT/SmallSetTest.cpp
+++ b/llvm/unittests/ADT/SmallSetTest.cpp
@@ -11,8 +11,8 @@
 //===----------------------------------------------------------------------===//
 
 #include "llvm/ADT/SmallSet.h"
-#include "llvm/ADT/STLExtras.h"
 #include "gtest/gtest.h"
+#include <algorithm>
 #include <string>
 
 using namespace llvm;
@@ -94,7 +94,7 @@ TEST(SmallSetTest, IteratorInt) {
 
   std::vector<int> V(s1.begin(), s1.end());
   // Make sure the elements are in the expected order.
-  llvm::sort(V);
+  std::sort(V.begin(), V.end());
   for (int i = 0; i < 3; i++)
     EXPECT_EQ(i, V[i]);
 
@@ -105,7 +105,7 @@ TEST(SmallSetTest, IteratorInt) {
 
   V.assign(s1.begin(), s1.end());
   // Make sure the elements are in the expected order.
-  llvm::sort(V);
+  std::sort(V.begin(), V.end());
   for (int i = 0; i < 6; i++)
     EXPECT_EQ(i, V[i]);
 }
@@ -120,7 +120,7 @@ TEST(SmallSetTest, IteratorString) {
   s1.insert("str 1");
 
   std::vector<std::string> V(s1.begin(), s1.end());
-  llvm::sort(V);
+  std::sort(V.begin(), V.end());
   EXPECT_EQ(2u, s1.size());
   EXPECT_EQ("str 1", V[0]);
   EXPECT_EQ("str 2", V[1]);
@@ -131,7 +131,7 @@ TEST(SmallSetTest, IteratorString) {
 
   V.assign(s1.begin(), s1.end());
   // Make sure the elements are in the expected order.
-  llvm::sort(V);
+  std::sort(V.begin(), V.end());
   EXPECT_EQ(4u, s1.size());
   EXPECT_EQ("str 0", V[0]);
   EXPECT_EQ("str 1", V[1]);
diff --git a/llvm/unittests/ADT/StringMapTest.cpp b/llvm/unittests/ADT/StringMapTest.cpp
index 7f10b3d7d3a8894b1ab0ac660268d94a8b89e082..acd8b566f9c7a6efc2c9204624c01104dd34daf6 100644
--- a/llvm/unittests/ADT/StringMapTest.cpp
+++ b/llvm/unittests/ADT/StringMapTest.cpp
@@ -343,7 +343,7 @@ TEST_F(StringMapTest, IterMapKeysSmallVector) {
   Map["D"] = 3;
 
   auto Keys = to_vector<4>(Map.keys());
-  llvm::sort(Keys);
+  std::sort(Keys.begin(), Keys.end());
 
   SmallVector<std::string_view, 4> Expected = {"A", "B", "C", "D"};
   EXPECT_EQ(Expected, Keys);
