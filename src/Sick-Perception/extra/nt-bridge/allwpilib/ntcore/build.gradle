ext {
    addNtcoreDependency = { binary, shared->
        binary.lib project: ':ntcore', library: 'ntcore', linkage: shared
    }

    addNtcoreJniDependency = { binary->
        binary.lib project: ':ntcore', library: 'ntcoreJNIShared', linkage: 'shared'
    }

    nativeName = 'ntcore'
    devMain = 'edu.wpi.first.ntcore.DevMain'
    generatedSources = "$projectDir/src/generated/main/native/cpp"
    generatedHeaders = "$projectDir/src/generated/main/native/include"
    jniSplitSetup = {
    }
    splitSetup = {
        it.tasks.withType(CppCompile) {
            it.includes 'src/main/native/cpp'
        }
    }
    exeSplitSetup = {
    }
}

apply from: "${rootDir}/shared/jni/setupBuild.gradle"

model {
    components {}
    binaries {
        all {
            if (!it.buildable || !(it instanceof NativeBinarySpec)) {
                return
            }
            if (it.component.name == "${nativeName}JNI") {
                lib project: ':wpinet', library: 'wpinet', linkage: 'static'
                lib project: ':wpiutil', library: 'wpiutil', linkage: 'static'
            } else {
                lib project: ':wpinet', library: 'wpinet', linkage: 'shared'
                lib project: ':wpiutil', library: 'wpiutil', linkage: 'shared'
            }
        }
    }
}

sourceSets.main.java.srcDir "${projectDir}/src/generated/main/java"

cppHeadersZip {
    from(generatedHeaders) {
        into '/'
    }
}

Action<List<String>> symbolFilter = { symbols ->
    symbols.removeIf({ !it.startsWith('NT_') })
} as Action<List<String>>;

nativeUtils.exportsConfigs {
    ntcore {
        x64ExcludeSymbols = [
            '_CT??_R0?AV_System_error',
            '_CT??_R0?AVexception',
            '_CT??_R0?AVfailure',
            '_CT??_R0?AVruntime_error',
            '_CT??_R0?AVsystem_error',
            '_CTA5?AVfailure',
            '_TI5?AVfailure',
            '_CT??_R0?AVout_of_range',
            '_CTA3?AVout_of_range',
            '_TI3?AVout_of_range',
            '_CT??_R0?AVbad_cast'
        ]
    }
    ntcoreJNI {
        x64SymbolFilter = symbolFilter
    }
}
